#
# Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

queries:
  -
    mappings:
      table_check: ~
      create_permission_table: ~
      create_role_permissions_table: ~
      get_permission: ~
      get_appname: ~
      add_permission: ~
      is_permission_exists: ~
      delete_permission: ~
      delete_permission_by_id: ~
      grant_permission: ~
      revoke_permission: ~
      revoke_permission_by_permission_id: ~
      revoke_permission_by_role: ~
      revoke_permission_by_role_id: ~
      has_permission: ~
      has_permission_by_permission_id: ~
      get_granted_roles: ~
      get_granted_roles_by_permission_id: ~
    type: default
    version: default
  -
    mappings:
      table_check: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1
      create_permission_table: CREATE TABLE PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL, PRIMARY KEY (APP_NAME, PERMISSION_STRING));
      create_role_permissions_table: CREATE TABLE ROLE_PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, ROLE_ID VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL);
      get_permission: SELECT PERMISSION_ID, PERMISSION_STRING FROM PERMISSIONS WHERE APP_NAME = ?
      get_appname: SELECT APP_NAME FROM PERMISSIONS WHERE PERMISSION_ID = ?
      add_permission: INSERT INTO PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING) VALUES(?, ?, ?)
      is_permission_exists: SELECT * FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission: DELETE FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission_by_id: DELETE FROM PERMISSIONS WHERE PERMISSION_ID = ?
      grant_permission: INSERT INTO ROLE_PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING, ROLE_ID) VALUES(?, ?, ?, ?)
      revoke_permission: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      revoke_permission_by_permission_id: DELETE FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
      revoke_permission_by_role: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      revoke_permission_by_role_id: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      has_permission: SELECT * FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID IN ({ROLE_IDS})
      has_permission_by_permission_id: SELECT * FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ? AND ROLE_ID IN ({ROLE_IDS})
      get_granted_roles: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      get_granted_roles_by_permission_id: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
    type: H2
    version: default
  -
    mappings:
      table_check: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1
      create_permission_table: CREATE TABLE PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL, PRIMARY KEY (APP_NAME, PERMISSION_STRING));
      create_role_permissions_table: CREATE TABLE ROLE_PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, ROLE_ID VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL);
      get_permission: SELECT PERMISSION_ID, PERMISSION_STRING FROM PERMISSIONS WHERE APP_NAME = ?
      get_appname: SELECT APP_NAME FROM PERMISSIONS WHERE PERMISSION_ID = ?
      add_permission: INSERT INTO PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING) VALUES(?, ?, ?)
      is_permission_exists: SELECT * FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission: DELETE FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission_by_id: DELETE FROM PERMISSIONS WHERE PERMISSION_ID = ?
      grant_permission: INSERT INTO ROLE_PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING, ROLE_ID) VALUES(?, ?, ?, ?)
      revoke_permission: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      revoke_permission_by_permission_id: DELETE FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
      revoke_permission_by_role: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      revoke_permission_by_role_id: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      has_permission: SELECT * FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID IN ({ROLE_IDS})
      has_permission_by_permission_id: SELECT * FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ? AND ROLE_ID IN ({ROLE_IDS})
      get_granted_roles: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      get_granted_roles_by_permission_id: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
    type: MySQL
    version: default
  -
    mappings:
      table_check: SELECT TOP 1 1 from {{TABLE_NAME}}
      create_permission_table: CREATE TABLE PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL, PRIMARY KEY (APP_NAME, PERMISSION_STRING));
      create_role_permissions_table: CREATE TABLE ROLE_PERMISSIONS ( APP_NAME VARCHAR(255) NOT NULL, PERMISSION_STRING VARCHAR(255) NOT NULL, ROLE_ID VARCHAR(255) NOT NULL, PERMISSION_ID VARCHAR(255) NOT NULL);
      get_permission: SELECT PERMISSION_ID, PERMISSION_STRING FROM PERMISSIONS WHERE APP_NAME = ?
      get_appname: SELECT APP_NAME FROM PERMISSIONS WHERE PERMISSION_ID = ?
      add_permission: INSERT INTO PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING) VALUES(?, ?, ?)
      is_permission_exists: SELECT * FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission: DELETE FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission_by_id: DELETE FROM PERMISSIONS WHERE PERMISSION_ID = ?
      grant_permission: INSERT INTO ROLE_PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING, ROLE_ID) VALUES(?, ?, ?, ?)
      revoke_permission: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      revoke_permission_by_permission_id: DELETE FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
      revoke_permission_by_role: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      revoke_permission_by_role_id: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      has_permission: SELECT * FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID IN ({ROLE_IDS})
      has_permission_by_permission_id: SELECT * FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ? AND ROLE_ID IN ({ROLE_IDS})
      get_granted_roles: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      get_granted_roles_by_permission_id: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
    type: Microsoft SQL Server
    version: default
  -
    mappings:
      table_check: SELECT 1 FROM {{TABLE_NAME}} WHERE ROWNUM=1
      create_permission_table: CREATE TABLE PERMISSIONS ( APP_NAME VARCHAR2(255) NOT NULL, PERMISSION_STRING VARCHAR2(255) NOT NULL, PERMISSION_ID VARCHAR2(255) NOT NULL, PRIMARY KEY (APP_NAME, PERMISSION_STRING));
      create_role_permissions_table: CREATE TABLE ROLE_PERMISSIONS ( APP_NAME VARCHAR2(255) NOT NULL, PERMISSION_STRING VARCHAR2(255) NOT NULL, ROLE_ID VARCHAR2(255) NOT NULL, PERMISSION_ID VARCHAR2(255) NOT NULL);
      get_permission: SELECT PERMISSION_ID, PERMISSION_STRING FROM PERMISSIONS WHERE APP_NAME = ?
      get_appname: SELECT APP_NAME FROM PERMISSIONS WHERE PERMISSION_ID = ?
      add_permission: INSERT INTO PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING) VALUES(?, ?, ?)
      is_permission_exists: SELECT * FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission: DELETE FROM PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      delete_permission_by_id: DELETE FROM PERMISSIONS WHERE PERMISSION_ID = ?
      grant_permission: INSERT INTO ROLE_PERMISSIONS(PERMISSION_ID, APP_NAME, PERMISSION_STRING, ROLE_ID) VALUES(?, ?, ?, ?)
      revoke_permission: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      revoke_permission_by_permission_id: DELETE FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
      revoke_permission_by_role: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      revoke_permission_by_role_id: DELETE FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID = ?
      has_permission: SELECT * FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ? AND ROLE_ID IN ({ROLE_IDS})
      has_permission_by_permission_id: SELECT * FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ? AND ROLE_ID IN ({ROLE_IDS})
      get_granted_roles: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE APP_NAME = ? AND PERMISSION_STRING = ?
      get_granted_roles_by_permission_id: SELECT ROLE_ID FROM ROLE_PERMISSIONS WHERE PERMISSION_ID = ?
    type: Oracle
    version: default
